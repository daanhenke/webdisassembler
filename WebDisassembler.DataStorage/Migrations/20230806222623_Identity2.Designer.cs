// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebDisassembler.DataStorage.Utility;

#nullable disable

namespace WebDisassembler.DataStorage.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230806222623_Identity2")]
    partial class Identity2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.FileReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("FileReferences");
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da8e7e13-6573-454b-b4db-dd9183f8210c"),
                            TenantId = new Guid("f074b57c-7c5f-4c0f-9af7-fa12065bc74e"),
                            IsAdministrator = true,
                            Name = "Admin Role"
                        });
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subdomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f074b57c-7c5f-4c0f-9af7-fa12065bc74e"),
                            Name = "Admin Tenant",
                            Subdomain = "admin",
                            UserId = new Guid("aab5ca3e-5859-4f6c-a33b-b806945b4adf")
                        });
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.TenantUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "TenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("RoleId", "TenantId");

                    b.ToTable("TenantUser");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aab5ca3e-5859-4f6c-a33b-b806945b4adf"),
                            TenantId = new Guid("f074b57c-7c5f-4c0f-9af7-fa12065bc74e"),
                            RoleId = new Guid("da8e7e13-6573-454b-b4db-dd9183f8210c")
                        });
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aab5ca3e-5859-4f6c-a33b-b806945b4adf"),
                            Email = "admin@webdisassembler.io",
                            PasswordHash = "123",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.Role", b =>
                {
                    b.HasOne("WebDisassembler.DataStorage.Models.Identity.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.Tenant", b =>
                {
                    b.HasOne("WebDisassembler.DataStorage.Models.Identity.User", "Owner")
                        .WithMany("OwnedTenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.TenantUser", b =>
                {
                    b.HasOne("WebDisassembler.DataStorage.Models.Identity.Tenant", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebDisassembler.DataStorage.Models.Identity.User", "User")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebDisassembler.DataStorage.Models.Identity.Role", "Role")
                        .WithMany("TenantUsers")
                        .HasForeignKey("RoleId", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.User", b =>
                {
                    b.OwnsMany("WebDisassembler.DataStorage.Models.Identity.AuthenticationToken", "Tokens", b1 =>
                        {
                            b1.Property<string>("Token")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("ExpiresBy")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Token");

                            b1.HasIndex("UserId");

                            b1.ToTable("AuthenticationToken");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.Role", b =>
                {
                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.Tenant", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("WebDisassembler.DataStorage.Models.Identity.User", b =>
                {
                    b.Navigation("OwnedTenants");

                    b.Navigation("TenantUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
